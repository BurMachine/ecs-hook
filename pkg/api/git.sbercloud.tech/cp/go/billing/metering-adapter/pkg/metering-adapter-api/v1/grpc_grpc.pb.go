// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: grpc.proto

package meteringadapterapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MeteringAdapterServiceClient is the client API for MeteringAdapterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeteringAdapterServiceClient interface {
	SendMeteringEvent(ctx context.Context, in *SendMeteringEventRequest, opts ...grpc.CallOption) (*SendMeteringEventResponse, error)
}

type meteringAdapterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeteringAdapterServiceClient(cc grpc.ClientConnInterface) MeteringAdapterServiceClient {
	return &meteringAdapterServiceClient{cc}
}

func (c *meteringAdapterServiceClient) SendMeteringEvent(ctx context.Context, in *SendMeteringEventRequest, opts ...grpc.CallOption) (*SendMeteringEventResponse, error) {
	out := new(SendMeteringEventResponse)
	err := c.cc.Invoke(ctx, "/sbercloud.cp.metering.adapter.v1.MeteringAdapterService/SendMeteringEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeteringAdapterServiceServer is the server API for MeteringAdapterService service.
// All implementations must embed UnimplementedMeteringAdapterServiceServer
// for forward compatibility
type MeteringAdapterServiceServer interface {
	SendMeteringEvent(context.Context, *SendMeteringEventRequest) (*SendMeteringEventResponse, error)
	mustEmbedUnimplementedMeteringAdapterServiceServer()
}

// UnimplementedMeteringAdapterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMeteringAdapterServiceServer struct {
}

func (UnimplementedMeteringAdapterServiceServer) SendMeteringEvent(context.Context, *SendMeteringEventRequest) (*SendMeteringEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMeteringEvent not implemented")
}
func (UnimplementedMeteringAdapterServiceServer) mustEmbedUnimplementedMeteringAdapterServiceServer() {
}

// UnsafeMeteringAdapterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeteringAdapterServiceServer will
// result in compilation errors.
type UnsafeMeteringAdapterServiceServer interface {
	mustEmbedUnimplementedMeteringAdapterServiceServer()
}

func RegisterMeteringAdapterServiceServer(s grpc.ServiceRegistrar, srv MeteringAdapterServiceServer) {
	s.RegisterService(&MeteringAdapterService_ServiceDesc, srv)
}

func _MeteringAdapterService_SendMeteringEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMeteringEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeteringAdapterServiceServer).SendMeteringEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sbercloud.cp.metering.adapter.v1.MeteringAdapterService/SendMeteringEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeteringAdapterServiceServer).SendMeteringEvent(ctx, req.(*SendMeteringEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeteringAdapterService_ServiceDesc is the grpc.ServiceDesc for MeteringAdapterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeteringAdapterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sbercloud.cp.metering.adapter.v1.MeteringAdapterService",
	HandlerType: (*MeteringAdapterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMeteringEvent",
			Handler:    _MeteringAdapterService_SendMeteringEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}
